// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum StateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct State<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for State<'a> {
  type Inner = State<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> State<'a> {
  pub const VT_PARTICLES: flatbuffers::VOffsetT = 4;
  pub const VT_POS: flatbuffers::VOffsetT = 6;
  pub const VT_VEL: flatbuffers::VOffsetT = 8;
  pub const VT_ACC: flatbuffers::VOffsetT = 10;
  pub const VT_ROT: flatbuffers::VOffsetT = 12;
  pub const VT_ROT_VEL: flatbuffers::VOffsetT = 14;
  pub const VT_FORCES: flatbuffers::VOffsetT = 16;
  pub const VT_RADII: flatbuffers::VOffsetT = 18;
  pub const VT_FIXITY: flatbuffers::VOffsetT = 20;
  pub const VT_BONDS: flatbuffers::VOffsetT = 22;
  pub const VT_BOND_INFO: flatbuffers::VOffsetT = 24;
  pub const VT_MATERIAL_POINTERS: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    State { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args StateArgs<'args>
  ) -> flatbuffers::WIPOffset<State<'bldr>> {
    let mut builder = StateBuilder::new(_fbb);
    if let Some(x) = args.material_pointers { builder.add_material_pointers(x); }
    if let Some(x) = args.bond_info { builder.add_bond_info(x); }
    if let Some(x) = args.bonds { builder.add_bonds(x); }
    if let Some(x) = args.fixity { builder.add_fixity(x); }
    if let Some(x) = args.radii { builder.add_radii(x); }
    if let Some(x) = args.forces { builder.add_forces(x); }
    if let Some(x) = args.rot_vel { builder.add_rot_vel(x); }
    if let Some(x) = args.rot { builder.add_rot(x); }
    if let Some(x) = args.acc { builder.add_acc(x); }
    if let Some(x) = args.vel { builder.add_vel(x); }
    if let Some(x) = args.pos { builder.add_pos(x); }
    builder.add_particles(args.particles);
    builder.finish()
  }


  #[inline]
  pub fn particles(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(State::VT_PARTICLES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn pos(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_POS, None)}
  }
  #[inline]
  pub fn vel(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_VEL, None)}
  }
  #[inline]
  pub fn acc(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_ACC, None)}
  }
  #[inline]
  pub fn rot(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_ROT, None)}
  }
  #[inline]
  pub fn rot_vel(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_ROT_VEL, None)}
  }
  #[inline]
  pub fn forces(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_FORCES, None)}
  }
  #[inline]
  pub fn radii(&self) -> Option<flatbuffers::Vector<'a, f32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, f32>>>(State::VT_RADII, None)}
  }
  #[inline]
  pub fn fixity(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(State::VT_FIXITY, None)}
  }
  #[inline]
  pub fn bonds(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(State::VT_BONDS, None)}
  }
  #[inline]
  pub fn bond_info(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(State::VT_BOND_INFO, None)}
  }
  #[inline]
  pub fn material_pointers(&self) -> Option<flatbuffers::Vector<'a, i32>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i32>>>(State::VT_MATERIAL_POINTERS, None)}
  }
}

impl flatbuffers::Verifiable for State<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("particles", Self::VT_PARTICLES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("pos", Self::VT_POS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("vel", Self::VT_VEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("acc", Self::VT_ACC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("rot", Self::VT_ROT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("rot_vel", Self::VT_ROT_VEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("forces", Self::VT_FORCES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, f32>>>("radii", Self::VT_RADII, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("fixity", Self::VT_FIXITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("bonds", Self::VT_BONDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("bond_info", Self::VT_BOND_INFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i32>>>("material_pointers", Self::VT_MATERIAL_POINTERS, false)?
     .finish();
    Ok(())
  }
}
pub struct StateArgs<'a> {
    pub particles: i32,
    pub pos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub vel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub acc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub rot: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub rot_vel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub forces: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub radii: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, f32>>>,
    pub fixity: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub bonds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub bond_info: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
    pub material_pointers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i32>>>,
}
impl<'a> Default for StateArgs<'a> {
  #[inline]
  fn default() -> Self {
    StateArgs {
      particles: 0,
      pos: None,
      vel: None,
      acc: None,
      rot: None,
      rot_vel: None,
      forces: None,
      radii: None,
      fixity: None,
      bonds: None,
      bond_info: None,
      material_pointers: None,
    }
  }
}

pub struct StateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> StateBuilder<'a, 'b> {
  #[inline]
  pub fn add_particles(&mut self, particles: i32) {
    self.fbb_.push_slot::<i32>(State::VT_PARTICLES, particles, 0);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_POS, pos);
  }
  #[inline]
  pub fn add_vel(&mut self, vel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_VEL, vel);
  }
  #[inline]
  pub fn add_acc(&mut self, acc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_ACC, acc);
  }
  #[inline]
  pub fn add_rot(&mut self, rot: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_ROT, rot);
  }
  #[inline]
  pub fn add_rot_vel(&mut self, rot_vel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_ROT_VEL, rot_vel);
  }
  #[inline]
  pub fn add_forces(&mut self, forces: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_FORCES, forces);
  }
  #[inline]
  pub fn add_radii(&mut self, radii: flatbuffers::WIPOffset<flatbuffers::Vector<'b , f32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_RADII, radii);
  }
  #[inline]
  pub fn add_fixity(&mut self, fixity: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_FIXITY, fixity);
  }
  #[inline]
  pub fn add_bonds(&mut self, bonds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_BONDS, bonds);
  }
  #[inline]
  pub fn add_bond_info(&mut self, bond_info: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_BOND_INFO, bond_info);
  }
  #[inline]
  pub fn add_material_pointers(&mut self, material_pointers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i32>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(State::VT_MATERIAL_POINTERS, material_pointers);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> StateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    StateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<State<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for State<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("State");
      ds.field("particles", &self.particles());
      ds.field("pos", &self.pos());
      ds.field("vel", &self.vel());
      ds.field("acc", &self.acc());
      ds.field("rot", &self.rot());
      ds.field("rot_vel", &self.rot_vel());
      ds.field("forces", &self.forces());
      ds.field("radii", &self.radii());
      ds.field("fixity", &self.fixity());
      ds.field("bonds", &self.bonds());
      ds.field("bond_info", &self.bond_info());
      ds.field("material_pointers", &self.material_pointers());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `State`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_state_unchecked`.
pub fn root_as_state(buf: &[u8]) -> Result<State, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<State>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `State` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_state_unchecked`.
pub fn size_prefixed_root_as_state(buf: &[u8]) -> Result<State, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<State>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `State` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_state_unchecked`.
pub fn root_as_state_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<State<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<State<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `State` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_state_unchecked`.
pub fn size_prefixed_root_as_state_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<State<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<State<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a State and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `State`.
pub unsafe fn root_as_state_unchecked(buf: &[u8]) -> State {
  flatbuffers::root_unchecked::<State>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed State and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `State`.
pub unsafe fn size_prefixed_root_as_state_unchecked(buf: &[u8]) -> State {
  flatbuffers::size_prefixed_root_unchecked::<State>(buf)
}
#[inline]
pub fn finish_state_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<State<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_state_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<State<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
